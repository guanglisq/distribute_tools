/*
Copyright (c) 2015-2016, CETC32. All rights reserved.

Zuo Long <asdzuo@qq.com>
Hubing   <hubinghank@163.com>
*/

/**
 * @file    rerosMsgTypes.c
 * @author  LiGuang
 *
 * @brief   TCPROS message and service descriptor functions.
 */

/*===========================================================================*/
/* HEADER FILES                                                              */
/*===========================================================================*/

#include "rerosMsgTypes.h"

/*===========================================================================*/
/* MESSAGE CONSTANTS                                                         */
/*===========================================================================*/

/** @addtogroup tcpros_msg_consts */
/** @{ */

/* There are no message constants.*/

/** @} */

/*===========================================================================*/
/* SERVICE CONSTANTS                                                         */
/*===========================================================================*/

/** @addtogroup tcpros_srv_consts */
/** @{ */

/* There are no service constants.*/

/** @} */

/*===========================================================================*/
/* MESSAGE FUNCTIONS                                                         */
/*===========================================================================*/

/** @addtogroup tcpros_msg_funcs */
/** @{ */

#define float32 float
#define int32 int
#define uint32 uint32_t
#define uint8  uint8_t
#define int8 int8_t
/*~~~ MESSAGE: demo_test/example_message ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/** @name Message <tt>demo_test/example_message</tt> */
/** @{ */

/**
 * @brief   Content length of a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct msg__demo_test__example_message</code> object.
 * @return
 *          Length of the TCPROS message contents, in bytes.
 */
size_t length_msg__demo_test__example_message(
  struct msg__demo_test__example_message *objp
) {
  size_t length = 0;

  rerosAssert(objp != NULL);

  length += sizeof(int32_t);
  length += sizeof(int32_t);
  length += sizeof(int32_t);

  (void)objp;
  return length;
}

/**
 * @brief   Initializes a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in,out] objp
 *          Pointer to an allocated <code>struct msg__demo_test__example_message</code> object.
 * @return
 *          Error code.
 */
void init_msg__demo_test__example_message(
  struct msg__demo_test__example_message *objp
) {
  rerosAssert(objp != NULL);

  /* Nothing to initialize.*/
  (void)objp;
}

/**
 * @brief   Copy a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in] src_objp
 *          Source Pointer to an initialized <code>struct msg__demo_test__example_message</code> object, or @p NULL.
 * @param[out] des_objp
 *          Destination Pointer to an initialized <code>struct msg__demo_test__example_message</code> object.
 * @return
 *          Error code.
 */
reros_err_t copy_msg__demo_test__example_message(
  struct msg__demo_test__example_message *src_objp,
  struct msg__demo_test__example_message *des_objp
) {
  if ((des_objp == NULL)||(src_objp == NULL)) { return REROS_ERR_BADPARAM; }

  des_objp->A = src_objp->A;
  des_objp->B = src_objp->B;
  des_objp->C = src_objp->C;
  return REROS_OK;
}

/**
 * @brief   Clean a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct msg__demo_test__example_message</code> object, or @p NULL.
 * @return
 *          Error code.
 */
void clean_msg__demo_test__example_message(
  struct msg__demo_test__example_message *objp
) {
  /* Nothing to clean.*/
  (void)objp;
}

/**
 * @brief   Receives a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in,out] tcpstp
 *          Pointer to a working @p RerosTcpRosStatus object.
 * @param[out] objp
 *          Pointer to an initialized <code>struct msg__demo_test__example_message</code> object.
 * @return
 *          Error code.
 */
reros_err_t recv_msg__demo_test__example_message(
  RerosTcpRosStatus *tcpstp,
  struct msg__demo_test__example_message *objp
) {
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err != REROS_OK) { goto _error; } }

  rerosTcpRosRecvRaw(tcpstp, objp->A); _CHKOK
  rerosTcpRosRecvRaw(tcpstp, objp->B); _CHKOK
  rerosTcpRosRecvRaw(tcpstp, objp->C); _CHKOK

  return tcpstp->err = REROS_OK;
_error:
  clean_msg__demo_test__example_message(objp);
  return tcpstp->err;
#undef _CHKOK
}

/**
 * @brief   Sends a TCPROS <tt>demo_test/example_message</tt> message.
 *
 * @param[in,out] tcpstp
 *          Pointer to a working @p RerosTcpRosStatus object.
 * @param[in] objp
 *          Pointer to an initialized <code>struct msg__demo_test__example_message</code> object.
 * @return
 *          Error code.
 */
reros_err_t send_msg__demo_test__example_message(
  RerosTcpRosStatus *tcpstp,
  struct msg__demo_test__example_message *objp
) {
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err != REROS_OK) { return tcpstp->err; } }

  rerosTcpRosSendRaw(tcpstp, objp->A); _CHKOK
  rerosTcpRosSendRaw(tcpstp, objp->B); _CHKOK
  rerosTcpRosSendRaw(tcpstp, objp->C); _CHKOK

  return tcpstp->err = REROS_OK;
#undef _CHKOK
}

/** @} */

/** @} */

/*===========================================================================*/
/* SERVICE FUNCTIONS                                                         */
/*===========================================================================*/

/** @addtogroup tcpros_srv_funcs */
/** @{ */

/*~~~ SERVICE: demo_test/example_srv ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/** @name Service <tt>demo_test/example_srv</tt> */
/** @{ */

/**
 * @brief   Content length of a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct srv__demo_test__example_srv</code> object.
 * @return
 *          Length of the TCPROS service request contents, in bytes.
 */
size_t length_in_srv__demo_test__example_srv(
  struct in_srv__demo_test__example_srv *objp
) {
  size_t length = 0;

  rerosAssert(objp != NULL);

  length += sizeof(int32_t);
  length += sizeof(int32_t);
  length += sizeof(int32_t);

  (void)objp;
  return length;
}

/**
 * @brief   Initializes a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] objp
 *          Pointer to an allocated <code>struct in_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
void init_in_srv__demo_test__example_srv(
  struct in_srv__demo_test__example_srv *objp
) {
  rerosAssert(objp != NULL);

  /* Nothing to initialize.*/
  (void)objp;
}

/**
 * @brief   Cleans a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct in_srv__demo_test__example_srv</code>object.
 * @return
 *          Error code.
 */
void clean_in_srv__demo_test__example_srv(
  struct in_srv__demo_test__example_srv *objp
) {
  rerosAssert(objp != NULL);

  /* Nothing to clean.*/
  (void)objp;
}

/**
 * @brief   Content length of a TCPROS <tt>demo_test/example_srv</tt> service response.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct srv__demo_test__example_srv</code> object.
 * @return
 *          Length of the TCPROS service response contents, in bytes.
 */
size_t length_out_srv__demo_test__example_srv(
  struct out_srv__demo_test__example_srv *objp
) {
  size_t length = 0;

  rerosAssert(objp != NULL);

  length += sizeof(int32_t);

  (void)objp;
  return length;
}

/**
 * @brief   Initializes a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] objp
 *          Pointer to an allocated <code>struct out_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
void init_out_srv__demo_test__example_srv(
  struct out_srv__demo_test__example_srv *objp
) {
  rerosAssert(objp != NULL);

  /* Nothing to initialize.*/
  (void)objp;
}

/**
 * @brief   Cleans a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] objp
 *          Pointer to an initialized <code>struct out_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
void clean_out_srv__demo_test__example_srv(
  struct out_srv__demo_test__example_srv *objp
) {
  rerosAssert(objp != NULL);

  /* Nothing to clean.*/
  (void)objp;
}

/**
 * @brief   Receives a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 * @param[in,out] tcpstp
 *          Pointer to a working @p RerosTcpRosStatus object.
 * @param[out] objp
 *          Pointer to an initialized <code>struct in_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
reros_err_t recv_in_srv__demo_test__example_srv(
  RerosTcpRosStatus *tcpstp,
  struct in_srv__demo_test__example_srv *objp
) {
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err) { goto _error; } }

  rerosTcpRosRecvRaw(tcpstp, objp->A); _CHKOK
  rerosTcpRosRecvRaw(tcpstp, objp->B); _CHKOK
  rerosTcpRosRecvRaw(tcpstp, objp->C); _CHKOK

  return tcpstp->err = REROS_OK;
_error:
  clean_in_srv__demo_test__example_srv(objp);
  return tcpstp->err;
#undef _CHKOK
}

/**
 * @brief   Sends a TCPROS <tt>demo_test/example_srv</tt> service response.
 *
 * @param[in,out] tcpstp
 *          Pointer to a working @p RerosTcpRosStatus object.
 * @param[in] objp
 *          Pointer to an initialized <code>struct out_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
reros_err_t send_out_srv__demo_test__example_srv(
  RerosTcpRosStatus *tcpstp,
  struct out_srv__demo_test__example_srv *objp
) {
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err) { return tcpstp->err; } }

  rerosTcpRosSendRaw(tcpstp, objp->SUM); _CHKOK

  return tcpstp->err = REROS_OK;
#undef _CHKOK
}

/**
 * @brief   Receives a TCPROS <tt>demo_test/example_srv</tt> service response.
 *
 * @param[in,out] tcpstp
 *          Pointer to a working @p RerosTcpRosStatus object.
 * @param[out] objp
 *          Pointer to an initialized <code>struct out_srv__demo_test__example_srv</code> object.
 * @return
 *          Error code.
 */
reros_err_t recv_out_srv__demo_test__example_srv(
  RerosTcpRosStatus *tcpstp,
  struct out_srv__demo_test__example_srv *objp
){
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err) { goto _error; } }

  rerosTcpRosRecvRaw(tcpstp, objp->SUM); _CHKOK

  return tcpstp->err = REROS_OK;
_error:
  clean_out_srv__demo_test__example_srv(objp);
  return tcpstp->err;
#undef _CHKOK
}

/**
 *@brief  Sends a TCPROS <tt>demo_test/example_srv</tt> service request.
 *
 *@param[in,out] tcpstp
 *        Pointer to a working @p RerosTcpRosStatus object.
 *@param[in] objp
 *        Pointer to an initialized <code>struct out_srv__demo_test__example_srv</code> object.
 *@return
 *        Error code.
 */
reros_err_t send_in_srv__demo_test__example_srv(
  RerosTcpRosStatus *tcpstp,
  struct in_srv__demo_test__example_srv *objp
){
  rerosAssert(tcpstp != NULL);
  rerosAssert(rerosConnIsValid(tcpstp->csp));
  rerosAssert(objp != NULL);
#define _CHKOK { if (tcpstp->err) { return tcpstp->err; } }

  rerosTcpRosSendRaw(tcpstp, objp->A); _CHKOK
  rerosTcpRosSendRaw(tcpstp, objp->B); _CHKOK
  rerosTcpRosSendRaw(tcpstp, objp->C); _CHKOK

  return tcpstp->err = REROS_OK;
#undef _CHKOK
}

/** @} */

/** @} */

/*===========================================================================*/
/* GLOBAL FUNCTIONS                                                          */
/*===========================================================================*/

/** @addtogroup tcpros_funcs */
/** @{ */

/**
 * @brief   Static TCPROS types registration.
 * @details Statically registers all the TCPROS message and service types used
 *          within this source file.
 * @note    Should be called by @p rerosUserRegisterStaticMsgTypes().
 * @see     rerosUserRegisterStaticMsgTypes()
 */
void rerosMsgTypesRegStaticTypes(void) {

  /* MESSAGE TYPES */

  /* demo_test/example_message */
  rerosRegisterStaticMsgTypeSZ("demo_test/example_message",
                              NULL, "");

  /* SERVICE TYPES */

  /* demo_test/example_srv */
  rerosRegisterStaticSrvTypeSZ("demo_test/example_srv",
                              NULL, "");
}

/** @} */

