/*************************************************
 * 
	Copyright (c) 2016, CETC32. All rights reserved.

	Author 	: 	Li Guang
	Date	:	2016.5.9

**************************************************/
#ifndef __MASTERBASE_H__
#define __MASTERBASE_H__

#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <Masterutility.h>
#include <pthread.h> 
#include <malloc.h>

#define MASTER_FALSE  (0)

#define MASTER_TRUE   (!MASTER_FALSE)

#define MASTER_NOP    (void)(0)

#define MASTER_NULL_THREADID  (~0ul)

#define MASTER_STACKPOOL_BLKSIZE(stksize) \
  (sizeof(void*) + (size_t)(stksize))

#define MASTER_STACKPOOL(varname, stksize, numstacks) \
  uint8_t varname[(numstacks)][MASTER_STACKPOOL_BLKSIZE(stksize)]

#define masterArrayNew(heapp, n, type) \
  ((type *)MasterBase::masterAlloc(heapp, (size_t)(n) * sizeof(type)))

#define masterAssert(expr) \
  assert(expr)

/* msgargs as ("format", ...) */
#define masterError(when, action, msgargs) \
  { if (when) { \
	  printf("Error at %s:%d\n" \
			 "  function: %s\n" \
			 "  reason:   %s\n" \
			 "  message:  ", \
			 __FILE__, __LINE__, __PRETTY_FUNCTION__, #when); \
	  printf msgargs ; \
	  { action; } } }

typedef pthread_mutex_t MasterMutex;

typedef uint32_t master_cnt_t;

typedef uint8_t master_bool_t;

typedef void            MasterMemHeap;

typedef int             master_err_t;

typedef master_err_t (*master_proc_f)(std::string &data);

typedef void *(*master_alloc_f)(size_t size);

typedef int             master_prio_t;

typedef pthread_t       MasterThreadId;

typedef pthread_cond_t  MasterCondVar;

enum {
  MASTER_OK               =    0, /**< @brief No errors.*/
  MASTER_ERR_TIMEOUT      = -100, /**< @brief Timeout lost.*/
  MASTER_ERR_NOMEM        = -101, /**< @brief Not enough free memory.*/
  MASTER_ERR_PARSE        = -102, /**< @brief Parsing error.*/
  MASTER_ERR_EOF          = -103, /**< @brief End of file/stream reached.*/
  MASTER_ERR_BADPARAM     = -104, /**< @brief Bad parameter.*/
  MASTER_ERR_NOCONN       = -105, /**< @brief Inactive connection.*/
  MASTER_ERR_BADCONN      = -106, /**< @brief Bad connection, check the low-level error code.*/
  MASTER_ERR_NOTIMPL      = -107  /**< @brief Feature not implemented.*/
};

namespace CMaster {

	class MasterBase
	{
		public:
			static void masterMutexObjectInit(MasterMutex *mtxp) {
	
			  pthread_mutexattr_t attr;
			  int err;
			  (void)err;
	
			  masterAssert(mtxp != NULL);
			  pthread_mutexattr_init(&attr);
			  pthread_mutexattr_setprotocol(&attr, PTHREAD_PRIO_INHERIT);
			  err = pthread_mutex_init(mtxp, &attr);
			  masterAssert(err == 0);
			}
			static void masterMutexObjectDestroy(MasterMutex *mtxp) {
				int err;
				err = pthread_mutex_destroy(mtxp);
				masterAssert(err == 0);
			}
			static void *masterAlloc(MasterMemHeap *heapp, size_t size) {
			  masterAssert(heapp == NULL);
			  void *chunk = malloc(size);;
			  masterError(chunk == NULL, return NULL,
			            ("Not enough free heap memory to allocate %u bytes\n",
			             (unsigned)size));
			  return chunk;
			}
			static void masterfree(void *data) {
				free(data);
			}
			static void masterCondVarObjectInit(MasterCondVar *cvp) {

			  masterAssert(cvp != NULL);
			  pthread_cond_init(cvp, NULL);
			}
			static int masterThreadJoin(MasterThreadId id) {

			  int msg;
			  int err;
			  (void)err;

			  err = pthread_join(id, (void**)&msg);
			  masterError(err != 0, return MASTER_ERR_BADPARAM,
						("Error [%s] while joining thread id %u\n",
						 strerror(err), (unsigned)id));
			  masterError(msg != MASTER_OK, MASTER_NOP,
			            ("Error while joining the thread %u\n", (unsigned)id));
			  return MASTER_OK;
			}
	};
	
}

#endif
